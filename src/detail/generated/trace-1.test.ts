// Autogenerated Detail test, do not edit.

const originalEnvironment = process.env;
process.env.NODE_ENV = "dev";
process.env.DATABASE_URL = "REDACTED";
process.env.COPYSCAPE_USERNAME = "UNKNOWN";
process.env.COPYSCAPE_KEY = "REDACTED";
process.env.JUNE_KEY = "REDACTED";
process.env.MG_API_KEY = "REDACTED";
process.env.BUGSNAG_KEY = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa";
process.env.NANGO = "REDACTED";
process.env.SCREENSHOT_ONE_ACCESS_KEY = "REDACTED";
process.env.SCREENSHOT_ONE_SECRET_KEY = "REDACTED";
process.env.__DETAIL_TEST_MODE = "true";

import { libraries, request, utils } from "@detail-dev/replay";
import crypto from "crypto";

jest.mock("crypto", () => {
  const mCrypto = {
    ...jest.requireActual("crypto"),
  };
  return mCrypto;
});
jest.mock("@prisma/client", () => libraries.PrismaInterceptor.createMock());

describe('GET /api/articles/"Use-the-auxiliary-JSON-card-then-you-can-copy-the-optical-matrix!-13/comments', () => {
  let response: request.Response;
  let httpInterceptor: libraries.HttpInterceptor;

  let cryptoInterceptor: libraries.CryptoInterceptor;

  let dateInterceptor: libraries.DateInterceptor;

  // Set up prisma fixtures.
  const prismaCallsExpected = [
    {
      library: "prisma",
      input: {
        model: "Article",
        operation: "findUnique",
        queryOptions: {
          where: {
            slug: '"Use-the-auxiliary-JSON-card-then-you-can-copy-the-optical-matrix!-13',
          },
          include: {
            comments: {
              where: {
                OR: [
                  {
                    author: {
                      demo: true,
                    },
                  },
                ],
              },
              select: {
                id: true,
                createdAt: true,
                updatedAt: true,
                body: true,
                author: {
                  select: {
                    username: true,
                    bio: true,
                    image: true,
                    followedBy: true,
                  },
                },
              },
            },
          },
        },
      },
      output: null,
      id: "33d88f4eddbcd8fd",
      timestamp: 1715362949278000,
      startup: false,
    },
  ];
  let prismaInterceptor: libraries.PrismaInterceptor;

  const EXPECTED_BODY = "{}";
  const EXPECTED_RESPONSE_HEADER = {
    "x-powered-by": "Express",
    "content-type": "application/json; charset=utf-8",
  };

  afterEach(async () => {
    jest.clearAllMocks();
    process.env = originalEnvironment;

    // Emit test results.
    utils.serializeTestResults("generated/test_results/1.json", {
      traceId: "a1de9af1360ce88f04045b2790b68f45",
      testFile: __filename.split("/").pop() as string,
      request: {
        pathKey: "/api/articles/:slug/comments",
        route:
          '/api/articles/"Use-the-auxiliary-JSON-card-then-you-can-copy-the-optical-matrix!-13/comments',
        method: "GET",
      },
      response: {
        expected: {
          status: 200,
          body: EXPECTED_BODY,
          header: EXPECTED_RESPONSE_HEADER,
        },
        observed: {
          status: response.status,
          body:
            response.headers && response.headers["content-length"] == 0
              ? undefined
              : response.text || JSON.stringify(response.body),
          header: libraries.canonicalizeResHeaders(response.header),
        },
      },
      expectedCalls: [...prismaCallsExpected],
      observedCalls: [
        ...httpInterceptor.getObservedCalls(),
        ...cryptoInterceptor.getObservedCalls(),
        ...dateInterceptor.getObservedCalls(),
        ...prismaInterceptor.getObservedCalls(),
      ],
    });
  });

  it("should run as expected with example data", async () => {
    // @ts-expect-error we manage http mocking globally, so that we can reuse a
    // global polly server. We pass in hooks to manage the global state here.
    httpInterceptor = new libraries.HttpInterceptor(global.__HTTP_CALL_HOOKS__);
    httpInterceptor.expectCalls([]);

    cryptoInterceptor = new libraries.CryptoInterceptor(crypto);
    cryptoInterceptor.expectCalls([]);

    dateInterceptor = new libraries.DateInterceptor();
    dateInterceptor.expectCalls([]);

    prismaInterceptor = new libraries.PrismaInterceptor();
    prismaInterceptor.expectCalls(prismaCallsExpected);

    // Import the app.
    const { app } = await import("../config");

    // Make the request.
    response = await request(app)
      .get(
        '/api/articles/"Use-the-auxiliary-JSON-card-then-you-can-copy-the-optical-matrix!-13/comments',
      )
      .set("host", "localhost:3000")
      .set("user-agent", "curl/8.4.0")
      .set("accept", "*/*")
      .set("x-detail-originator", "detail");
  });
});
